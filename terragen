#!/usr/bin/env python

import ConfigParser
import logging
import os
import re
import sys

import click
import requests


class Log(object):
    logger = None

    class _sanitize(object):
        def __init__(self, function):
            self._function = function

        def __call__(self, klass, *args):
            content = ''
            for arg in args:
                content = ' '.join([content, str(arg)])
            self._function(klass, content)

    @classmethod
    def _initilize_logger(cls, level):
        stdout_handler = logging.StreamHandler(sys.stdout)
        handlers = [stdout_handler]
        logging.basicConfig(
            level=level,
            format='%(levelname)s - %(message)s',
            handlers=handlers
        )

    @classmethod
    def get_logger(cls, level=logging.ERROR):
        if not cls.logger:
            cls._initilize_logger(level)
            cls.logger = logging.getLogger(__name__)
        return cls.logger

    @classmethod
    @_sanitize
    def debug(cls, *args):
        cls.logger.debug(*args)

    @classmethod
    @_sanitize
    def info(cls, *args):
        cls.logger.info(*args)

    @classmethod
    @_sanitize
    def warning(cls, *args):
        cls.logger.warning(*args)

    @classmethod
    @_sanitize
    def error(cls, *args):
        cls.logger.error(*args)

    @classmethod
    @_sanitize
    def critical(cls, *args):
        cls.logger.critical(*args)


@click.group()
@click.option('--stdout', is_flag=True, default=True,
              show_default=True, help='Print generated code to stdout')
@click.option('--debug', is_flag=True, help='Enable debugging')
@click.option('--path', type=click.Path(exists=True), default=os.getcwd(),
              show_default=True, help='Terraform module path')
@click.pass_context
def cli(ctx, stdout, debug, path):
    ctx.ensure_object(dict)
    if debug:
        Log.get_logger(level=logging.DEBUG)
    else:
        Log.get_logger(level=logging.INFO)

    path = os.path.normpath(path)
    ctx.obj['DEBUG'] = debug
    ctx.obj['STDOUT'] = stdout
    ctx.obj['PATH'] = path

    Log.debug('Debug is enabled!')
    Log.debug('File/Directory path: ', path)

    if os.path.isfile(path):
        files = [path]
    else:
        root, dirs, filepaths = os.walk(path).next()
        files = [os.path.join(root, f) for f in filepaths if f.endswith('.tf')]

    ctx.obj['FILES'] = files
    Log.debug('Files to be processed: ', files)


class DocumentationManager(object):
    RESOURCES_URLS_MAP = {}
    PROVIDERS_CACHED = []

    @classmethod
    def _create_resource_urls_map(cls, provider):
        BASE_URL = 'https://www.terraform.io/docs/providers/{provider}/index.html'
        index_url = BASE_URL.format(provider=provider)
        cls.PROVIDERS_CACHED.append(provider)
        return index_url

    @staticmethod
    def _get_resource_url(cls, resource):
        provider, resource = resource.split('_', 1)
        if provider not in cls.PROVIDERS_CACHED:
            cls._create_resource_urls_map(provider)
        resource_doc_url = cls.RESOURCES_URLS_MAP.get(provider)
        return resource_doc_url

        resource_urls_map = DocumentationManager._get_resources_urls_map()
        return resource_urls_map.get(resource)

    def generate_docs(cls, resources):
        for resource_type in resources:
            pass


class HCLParser(object):
    def __init__(self, files):
        self.hcl = ''
        for f in files:
            with open(f) as fp:
                self.hcl = '\n'.join([
                    self.hcl, fp.read()])

    def get_variables(self):
        REGEX = r"var\.[a-zA-Z0-9_]+"
        matches = re.finditer(REGEX, self.hcl, re.MULTILINE)
        variables = []
        for match in matches:
            variable = match.group().replace('var.', '')
            if variable not in variables:
                Log.debug(variable)
                variables.append(variable)
        return variables

    def get_resources_with_names(self):
        REGEX = r"^resource \"[a-zA-Z0-9_]+\" \"[a-zA-Z0-9]+\""
        matches = re.finditer(REGEX, self.hcl, re.MULTILINE)
        resources = {}
        for match in matches:
            resource_type, resource_name = match.group().replace(
                'resource ','').replace('"', '').split()
            resources[resource_type] = resource_name
        return resources

    def get_resources(self):
        resources = self.get_resources_with_names()
        return resources.keys()


CONFIG_FILE_NAME = 'config.cfg'
CONFIG_DIRECTORY = os.path.expanduser('~/.terragen')
CONFIG_FILE = os.path.join(CONFIG_DIRECTORY, CONFIG_FILE_NAME)

@cli.command()
@click.pass_context
def init(ctx):
    reset = 'Y'
    if os.path.exists(CONFIG_FILE):
        reset = click.prompt('Config file exists. Do you want to reset to default settings? Y/n', default='Y')
    if not os.path.exists(CONFIG_DIRECTORY):
        os.makedirs(CONFIG_DIRECTORY)
    if reset == 'Y':
        config = ConfigParser.RawConfigParser()
        config.add_section('general')
        config.set('general', 'providers', ['aws'])
        with open(CONFIG_FILE, 'wb') as fp:
            config.write(fp)


@cli.command()
@click.pass_context
def update(ctx, config):
    config = ConfigParser.RawConfigParser()
    config.read(CONFIG_FILE)
    providers = config.get('general', 'providers')
    for provider in providers:
        # scrap providers and store in database


@cli.command()
@click.option('--out-file', type=click.Path(exists=False),
              help='Variables output file path')
@click.option('--add-description', is_flag=True, default=False,
              help='Add description from terraform docs')
@click.option('--add-default', is_flag=True, default=False,
              help='Add default values from terraform docs')
@click.pass_context
def variables(ctx, out_file, add_description, add_default):
    path = ctx.obj['PATH']
    out_to_stdout = ctx.obj['STDOUT']

    files = ctx.obj['FILES']
    parser = HCLParser(files)
    variables = parser.get_variables()

    if add_description:
        Log.info('Please run `terragen update <provider>` to update terragen document database.')

    VARIABLE_TEMPLATE = 'variable "%s" {\n  description = ""\n}'
    code = ''
    for variable in variables:
        code = '\n\n'.join([code, VARIABLE_TEMPLATE % variable])

    resources = parser.get_resources()
    Log.debug(resources)

    if out_to_stdout:
        sys.stdout.write(code)
        sys.stdout.flush()
    if out_file:
        with open(os.path.join(path, out_file), 'w') as fp:
            fp.write(code)


if __name__ == '__main__':
    cli(obj={})

