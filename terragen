#!/usr/bin/env python

import logging
import os
import re
import sys

import click


class Log(object):
    logger = None

    class _sanitize(object):
        def __init__(self, function):
            self._function = function

        def __call__(self, klass, *args):
            content = ''
            for arg in args:
                content = ' '.join([content, str(arg)])
            self._function(klass, content)

    @classmethod
    def _initilize_logger(cls, level):
        stdout_handler = logging.StreamHandler(sys.stdout)
        handlers = [stdout_handler]
        logging.basicConfig(
            level=level,
            format='[%(asctime)s] - %(levelname)s - %(message)s',
            handlers=handlers
        )

    @classmethod
    def get_logger(cls, level=logging.ERROR):
        if not cls.logger:
            cls._initilize_logger(level)
            cls.logger = logging.getLogger(__name__)
        return cls.logger

    @classmethod
    @_sanitize
    def debug(cls, *args):
        cls.logger.debug(*args)

    @classmethod
    @_sanitize
    def info(cls, *args):
        cls.logger.info(*args)

    @classmethod
    @_sanitize
    def warning(cls, *args):
        cls.logger.warning(*args)

    @classmethod
    @_sanitize
    def error(cls, *args):
        cls.logger.error(*args)

    @classmethod
    @_sanitize
    def critical(cls, *args):
        cls.logger.critical(*args)


@click.group()
@click.option('--stdout', is_flag=True, help='Print generated code to stdout')
@click.option('--debug', is_flag=True, help='Enable debugging')
@click.option('--path', type=click.Path(exists=True), default=os.getcwd(),
              help='Terraform module path')
@click.pass_context
def cli(ctx, stdout, debug, path):
    ctx.ensure_object(dict)
    if debug:
        Log.get_logger(level=logging.DEBUG)
    else:
        Log.get_logger(level=logging.INFO)

    path = os.path.normpath(path)
    ctx.obj['DEBUG'] = debug
    ctx.obj['STDOUT'] = stdout
    ctx.obj['PATH'] = path

    Log.debug('Debug is enabled!')
    Log.debug('File/Directory path: ', path)

    if os.path.isfile(path):
        files = [path]
    else:
        root, dirs, filepaths = os.walk(path).next()
        files = [os.path.join(root, f) for f in filepaths if f.endswith('.tf')]

    ctx.obj['FILES'] = files
    Log.debug('Files to be processed: ', files)


@cli.command()
@click.option('--out-file', type=click.Path(exists=False), default='vars.tf',
              help='Variables output file path')
@click.pass_context
def variables(ctx, out_file):
    path = ctx.obj['PATH']
    out_to_stdout = ctx.obj['STDOUT']
    regex = r"var\.[a-zA-Z0-9_]+"
    files = ctx.obj['FILES']
    consolidated_terraform = ''
    for f in files:
        with open(f) as fp:
            consolidated_terraform = '\n'.join([
                consolidated_terraform, fp.read()])

    matches = re.finditer(regex, consolidated_terraform, re.MULTILINE)

    variables = []
    for match in matches:
        variable = match.group()
        if variable not in variables:
            Log.debug(variable)
            variables.append(variable)
    variables.sort()
    VARIABLE_TEMPLATE = 'variable "%s" {\n  description = ""\n}\n\n'

    code = ''
    for variable in variables:
        code = ''.join([code, VARIABLE_TEMPLATE % variable])
    if out_to_stdout:
        sys.stdout.write(code)
        sys.stdout.flush()
    else:
        with open(os.path.join(path, out_file), 'w') as fp:
            fp.write(code)


if __name__ == '__main__':
    cli(obj={})

